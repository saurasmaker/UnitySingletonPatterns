using UnityEngine;
/*
 * This namespace contains 3 types of Singleton patterns to use
 * in your Unity projects. 
 *
 * LastUpdate: 06/10/2023
 * Author: Iván Saura Cuadrado
 * Git: https://github.com/saurasmaker/UnitySingletonPatterns
 */

namespace Patterns.Singletons
{
    public interface ISingletonMonoBehaviour<T>
    {
        public static T Instance { get; }
        public static T ForceInstance { get; }
        
        /// <summary>
        /// Replaces the function "Awake" of the MonoBehaviour class
        /// </summary>
        protected void OnAwake() { }
    }


    /// <summary>
    /// This class is a Singleton pattern for default class of C#.
    /// The generic type T must be the class itself that inherits from Singleton.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class Singleton<T> where T : class, new()
    {
        private static T _instance;
        public static T Instance
        {
            get
            {
                _instance ??= new T();
                return _instance;
            }
        }
    }


    /// <summary>
    /// All gameobjects that are intended to have a unique instance in the scene must inherit
    /// this class.
    /// 
    /// The generic type T must be the class itself that inherits from SingletonMonoBehaviour 
    /// 
    /// It is important to do not use "Awake" method of MonoBehaviour class. It will cause
    /// unwanted behavior. Instead of this methods, it is better to use "OnAwake" method that
    /// replicate the behavior of the previous ones
    /// </summary>
    /// <typeparam name="T"></typeparam>
    [DisallowMultipleComponent]
    public class SingletonMonoBehaviour<T> : MonoBehaviour, ISingletonMonoBehaviour<T> where T : SingletonMonoBehaviour<T>
    {
        private bool _persistent = false;

        /// <summary>
        /// This property will make the gameobject a "DontDestroyOnLoad GameObject.
        /// This action can not be undone.
        /// </summary>
        public bool Persistent 
        { 
            get { return _persistent; }
            set
            {
                if (!value && _persistent)
                    Debug.LogWarning("You cannot convert a \"DontDestroyOnLoad\" object to a \"DestroyOnLoad\" object. Once you set the \"Persistent\" variable to \"true\", the change cannot be undone.");
                else if (_persistent != value)
                {
                    _persistent = value;
                    if (_persistent)
                        DontDestroyOnLoad(gameObject);
                }
            }
        }

        private static T _instance = null;

        /// <summary>
        /// Get unique Instance of T class. If the instance has not been initialized,
        /// a warning will appear in console notifying that the property will return
        /// a "null" value. 
        /// </summary>
        public static T Instance
        {
            get
            {
                string className = typeof(T).Name;
                if (_instance == null)
                    Debug.LogWarning("SingletonMonoBehaviour of type " + className + " are not instanced.\n"
                        + className + " will be returned as \"Null\" object.");

                return _instance;
            }
            
        }

        /// <summary>
        /// Get unique Instance of T class. If the instance has not been initialized, the
        /// property will generate automatically the GameObject and will instance it adding
        /// the corresponding SingletonMonoBehaviour<T>. 
        /// </summary>
        public static T ForceInstance
        {
            get
            {
                string className = typeof(T).Name;
                if (_instance == null)
                {
                    Debug.LogWarning("SingletonMonoBehaviour of type " + className + " are not instanced.\n" 
                        + className + " will be autogenerated.");
                    _instance = new GameObject(typeof(T).Name).AddComponent<T>();
                }

                return _instance;
            }
        }

        private void Awake()
        {
            if (_instance != null)
            {
                Debug.LogWarning("The SingletonMonoBehaviour of class " + typeof(T).Name + " has already been generated. This instance will be destroyed immediately.");
                Destroy(gameObject);
            }
            else
                _instance = (T)this;

            if(_persistent)
                DontDestroyOnLoad(this);

            OnAwake();
        }

        virtual protected void OnAwake(){}
    }


    /// <summary>
    /// All gameobjects that are intended to have a unique instance in the scene must inherit
    /// this class.
    /// 
    /// The generic type T must be the class itself that inherits from SingletonMonoBehaviour 
    /// 
    /// It is important to do not use "Awake" method of MonoBehaviour class. It will cause
    /// unwanted behavior. Instead of this methods, it is better to use "OnAwake" method that
    /// replicate the behavior of the previous ones
    /// </summary>
    /// <typeparam name="T"></typeparam>
    [DisallowMultipleComponent]
    public class SingletonMonoBehaviourPersistent<T> : MonoBehaviour, ISingletonMonoBehaviour<T> where T : SingletonMonoBehaviourPersistent<T>
    {
        private static T _instance = null;
        public static T Instance
        {
            get
            {
                string className = typeof(T).Name;
                if (_instance == null)
                    Debug.LogWarning("SingletonMonoBehaviour of type " + className + " are not instanced.\n"
                        + className + " will be returned as \"Null\" object.");

                return _instance;
            }

        }
        public static T ForceInstance
        {
            get
            {
                string className = typeof(T).Name;
                if (_instance == null)
                {
                    Debug.LogWarning("SingletonMonoBehaviourPersistent of type " + className + " are not instanced.\n"
                        + className + " will be autogenerated.");
                    _instance = new GameObject(typeof(T).Name).AddComponent<T>();
                }

                return _instance;
            }
        }

        private void Awake()
        {
            if (_instance != null)
            {
                Debug.LogWarning("The SingletonMonoBehaviourPersistent of class " + typeof(T).Name + " has already been generated. This instance will be destroyed immediately.");
                Destroy(gameObject);
            }
            else
            {
                _instance = (T)this;
                DontDestroyOnLoad(gameObject);
            }              

            OnAwake();
        }

        virtual protected void OnAwake() { }
    }
}

